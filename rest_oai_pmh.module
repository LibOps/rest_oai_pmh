<?php

/**
 * @file
 * Contains rest_oai_pmh.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function rest_oai_pmh_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the rest_oai_pmh module.
    case 'help.page.rest_oai_pmh':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Exposes schema.org dublin core mappings in an OAI-PMH endpoint') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function rest_oai_pmh_theme() {
  return [
    'rest_oai_pmh_record' => [
      'variables' => [
        'entity_id' => NULL,
        'entity_type' => NULL,
        'entity' => NULL,
        'metadata_prefix' => 'oai_dc',
        'mapping_source' => \Drupal::moduleHandler()->moduleExists('metatag_dc') ? 'metatag_dc' : 'rdf',
        'set' => FALSE,
        'elements' => [],
      ],
    ],
  ];
}

function template_preprocess_rest_oai_pmh_record(&$variables) {
  // init the entity variables
  if (!empty($variables['entity'])) {
    $entity_id = $variables['entity']->id();
    $entity_type = $variables['entity']->getEntityTypeId();
  }
  else {
    $entity_id = empty($variables['entity_id']) ? FALSE : $variables['entity_id'];
    $entity_type = empty($variables['entity_type']) ? FALSE : $variables['entity_type'];
    if (!empty($entity_id)
      && !empty($entity_type)
      && empty($variables['entity'])) {
      $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
      $variables['entity'] = $storage->load($entity_id);
    }
  }

  $entity = $variables['entity'];
  $mapping_source = empty($variables['mapping_source']) ? 'rdf' : $variables['mapping_source'];
  $allowed_properties = rest_oai_pmh_get_allowed_properties($variables['metadata_prefix']);

  // if Metatag is being used, get the elements from that module
  if ($mapping_source === 'metatag_dc' && \Drupal::moduleHandler()->moduleExists('metatag_dc')) {
    $metatags = metatag_generate_entity_metatags($entity);
    // go through all the metatags ['#type' => 'tag'] render elements
    foreach ($metatags as $term => $metatag) {
      // metatag_dc stores terms ad dcterms.ELEMENT
      // rename for oai_dc
      $property = str_replace('dcterms.', 'dc:', $metatag['#attributes']['name']);
      // see if it's a valid property
      if (in_array($property, $allowed_properties)) {
        // add all the values for this field so the twig template can print
        $variables['elements'][$property][] = $metatag['#attributes']['content'];
      }
    }
  }
  // if RDF is being used, get the elements from that module
  elseif ($mapping_source === 'rdf' && \Drupal::moduleHandler()->moduleExists('rdf')) {
    $rdf_mapping = rdf_get_mapping($entity_type, $entity->bundle());
    $fields = $entity->getFields();
    // go through all this entity's fields
    foreach ($fields as $field => $items) {
      // if the person viewing doesn't have access to this field
      // OR the field is empty, no need to go any further
      if (!$items->access() || $items->isEmpty()) {
        continue;
      }

      // see if there is an RDF mapping for this field
      $field_mapping = $rdf_mapping->getPreparedFieldMapping($field);
      if (!empty($field_mapping)) {

        // see if the field is mapped to a property in this schema
        // e.g oai_dc only will print Dublin Core tags
        $element = FALSE;
        foreach ($field_mapping['properties'] as $property) {
          if (in_array($property, $allowed_properties)) {
            $element = $property;
            break;
          }
        }

        // if $element is set, we have a valid property
        if ($element) {
          // add all the values for this field so the twig template can print
          $variables['elements'][$element] = [];
          foreach ($items as $item) {
            $index = $item->mainPropertyName();
            $value = $item->getValue()[$index];
            if (!empty($field_mapping['datatype_callback'])) {
              $callback = $field_mapping['datatype_callback']['callable'];
              $arguments = isset($field_mapping['datatype_callback']['arguments']) ? $field_mapping['datatype_callback']['arguments'] : NULL;
              $value = call_user_func($callback, $value, $arguments);
            }
            elseif ($index == 'target_id' && !empty($item->entity)) {
              $value = $item->entity->label();
            }
            $variables['elements'][$element][] = $value;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_rest_resource_alter().
 */
function rest_oai_pmh_rest_resource_alter(&$definitions) {
  // if the repository admin set a path, override the default URI
  $path = \Drupal::config('rest_oai_pmh.settings')->get('repository_path');
  if ($path) {
  	$definitions['oai_pmh']['uri_paths']['canonical'] = $path;
  }
}

/**
 * Implements hook_metatag_tags_alter().
 */
function rest_oai_pmh_metatag_tags_alter(&$definitions) {
  // set some dublin core metatags to allow for multiple values
  $terms = ['dcterms_creator', 'dcterms_subject'];
  foreach ($terms as $term) {
    $definitions[$term]['multiple'] = TRUE;
  }
}

/**
 * Implements hook_entity_insert().
 */
function rest_oai_pmh_entity_insert(EntityInterface $entity) {
  rest_oai_pmh_entity_alter($entity);
}

/**
 * Implements hook_entity_update().
 */
function rest_oai_pmh_entity_update(EntityInterface $entity) {
  rest_oai_pmh_entity_alter($entity);
}

function rest_oai_pmh_entity_alter($entity) {
  $entity_type = $entity->getEntityTypeId();
  if ($entity_type === 'view') {
    $entity_id = $entity->id();
    $d_args = [':view_id' => $entity_id . '%'];
    $config = \Drupal::service('config.factory')->getEditable('rest_oai_pmh.settings');
    $view_displays = $config->get('view_displays') ? : [];
    $in_config = FALSE;
    foreach ($view_displays as $view_display) {
      list($view_id, $display_id) = explode(':', $view_display);
      if ($view_id == $entity_id) {
        $in_config = TRUE;
        break;
      }
    }
    if ($in_config) {
      $displays = [];
      foreach ($entity->get('display') as $display_id => $display) {
        $displays[] = $entity_id . ':' . $display_id;
      }
      $deleted_displays = array_diff($view_displays, $displays);

      if (count($deleted_displays)) {
        foreach ($deleted_displays as $deleted_display) {
          rest_oai_pmh_remove_sets_by_display_id($deleted_display);
          unset($view_displays[$deleted_display]);
        }
        $config->set('view_displays', $view_displays)->save();
      }
      rest_oai_pmh_cache_views();
    }
  }
  else {
    // @todo see if we can act on cache invalidations for Views we expose
    // instead of just rebuilding everything when an entity we expose to OAI is created/updated
    $d_args = [':entity_type' => $entity_type];
    $rebuild = \Drupal::database()->query("SELECT * FROM {rest_oai_pmh_record} r, {rest_oai_pmh_set} s
      WHERE s.entity_type = :entity_type OR r.entity_type = :entity_type
      LIMIT 1", $d_args)->fetchField();
    if ($rebuild) {
      rest_oai_pmh_cache_views();
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function rest_oai_pmh_entity_delete(EntityInterface $entity) {
  $entity_type = $entity->getEntityTypeId();
  $entity_id = $entity->id();
  if ($entity_type === 'view') {
    $d_args = [':view_id' => $entity_id . '%'];
    $view_displays = \Drupal::database()->query("SELECT DISTINCT(view_display) FROM {rest_oai_pmh_set} s
      WHERE s.view_display LIKE :view_id", $d_args)->fetchCol();
    foreach ($view_displays as $view_display) {
      rest_oai_pmh_remove_sets_by_display_id($view_display);
    }
  }
  else {
    rest_oai_pmh_remove_record($entity_type, $entity_id);
  }
}

function rest_oai_pmh_cache_views($view_displays = FALSE, $queue_name = 'rest_oai_pmh_views_cache_cron') {
  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get($queue_name);

  // if no view_displays were passed
  // get a list of all view displays set for OAI-PMH
  if (!$view_displays) {
    $config = \Drupal::config('rest_oai_pmh.settings');
    $view_displays = $config->get('view_displays') ? : [];
    // flush the queue since we're rebuilding everything
    $queue->deleteQueue();
  }

  foreach ($view_displays as $view_display) {
    list($view_id, $display_id) = explode(':', $view_display);

    $view = \Drupal\views\Views::getView($view_id);
    $view->setDisplay($display_id);

    $data = [
      'view_id' => $view_id,
      'display_id' => $display_id,
    ];
    foreach ($view->display_handler->getHandlers('argument') as $contextual_filter) {
      $definition = $contextual_filter->definition;
      $entity_type = empty($definition['entity_type']) ? FALSE : $definition['entity_type'];
      $table = $definition['table'];
      $field = $definition['field_name'];
      $column = $definition['field'];
      // if the contextual filter is of an entity reference field
      if ($entity_type && $column === $field . '_target_id') {
        $contextual_filters = TRUE;
        $entity_storage = \Drupal::entityTypeManager()->getStorage($definition['entity_type']);
        $entity_table = $entity_storage->getBaseTable();
        $field_table = $definition['entity_type'] . '__' . $field;
        $id = $entity_storage->getEntityType()->getKey('id');
        $condition = $column . ' = ' . $id;

        $query = \Drupal::database()->select($entity_table, 'entity');
        $query->innerJoin($field_table, 'f', $condition);
        $query->addField('entity', $id);
        $query->groupBy($id);
        $ids = $query->execute()->fetchCol();
        foreach ($ids as $id) {
          $entity = $entity_storage->load($id);
          if ($entity) {
            $data['sets'][] = [
              'arguments' => [$entity->id()],
              'set_entity_type' => $definition['entity_type'],
              'set_id' => $definition['entity_type'] . ':' . $entity->id(),
              'set_label' => $entity->label(),
              'view_display' => $view_display
            ];
          }
        }
      }
    }

    // if no contextual filter was found for this View
    // use all the view results as a single set for OAI-PMH
    // and make the set's name/id based off the View
    if (empty($data['sets'])) {
      $view_storage = \Drupal::entityTypeManager()->getStorage('view');
      $view = $view_storage->load($view_id);
      $display = $view->get('display');
      $data['sets'][] = [
        'arguments' => [],
        'set_entity_type' => 'view',
        'set_id' => 'view:' . $view_display,
        'set_label' => $display[$display_id]['display_title'],
        'view_display' => $view_display,
      ];
    }
   $queue->createItem($data);
  }
}

function rest_oai_pmh_remove_sets_by_display_id($view_display) {
  $disabled_sets = \Drupal::database()->query('SELECT set_id FROM {rest_oai_pmh_set} WHERE view_display = :view_display', [':view_display' => $view_display])->fetchCol();
  foreach ($disabled_sets as $disabled_set) {
    rest_oai_pmh_remove_set($disabled_set);
  }
}

function rest_oai_pmh_remove_set($set_id) {
  // find all records in this set
  $args = [':set_id' => $set_id];
  $disabled_records = \Drupal::database()->query('SELECT entity_type, entity_id
    FROM {rest_oai_pmh_member}
    WHERE set_id = :set_id', $args);

  foreach ($disabled_records as $disabled_record) {
    rest_oai_pmh_remove_record($disabled_record->entity_type, $disabled_record->entity_id, $disabled_set);
  }

  // finally, delete the set
  \Drupal::database()->delete('rest_oai_pmh_set')
    ->condition('set_id', $set_id)
    ->execute();
}

function rest_oai_pmh_remove_record($entity_type, $entity_id, $set_id = FALSE) {
  if ($set_id) {
    $args = [
      ':set_id' => $set_id,
      ':type' => $disabled_record->entity_type,
      ':id' => $disabled_record->entity_id
    ];
    $set_id = \Drupal::database()->query('SELECT set_id FROM {rest_oai_pmh_member}
      WHERE entity_type = :type
        AND entity_id = :id
        AND set_id <> :set_id', $args)->fetchField();
  }

  // if the record is not in any other sets, delete the record
  if (!$set_id) {
    \Drupal::database()->delete('rest_oai_pmh_record')
      ->condition('entity_type', $entity_type)
      ->condition('entity_id', $entity_id)
      ->execute();
  }
  // remove this record's set associations
  $query = \Drupal::database()->delete('rest_oai_pmh_member')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id);

  if ($set_id) {
    $query->condition('set_id', $set_id);
  }

  $query->execute();
}

function rest_oai_pmh_get_allowed_properties($metadata_prefix) {
  $elements = [];
  switch ($metadata_prefix) {
    case 'oai_dc':
      $elements = [
        'dc:title',
        'dc:description',
        'dc:identifier',
        'dc:extent',
        'dc:type'
      ];
      break;
  }

  return $elements;
}